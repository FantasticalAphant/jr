#!/bin/bash

# Simplified `javac` and `java`

# TODO - Take in more flags/options
#      - refine modularization
#      - if there is only one java file in the directory, run if it has main
#      - print an error message if there are no java files in the directory
#      - allow user to choose which java files they want to exclude from compiling process
#      - invalid flag if flag passed without any arguments
#      - file is not deleted if user exits using ctrl-c
#      - javac can just be skipped if the file being compiled has no dependencies
#      - do not use javac twice

d_flag=false # delete the compiled files if true
h_flag=false # use of help flag - do not exit with error
t_flag=false # test instead of run if true

# Print to stderr
echoerr() { echo "$@" 1>&2; }

# Print usage information
print_usage() {
    printf "Usage: jr [options] <source files>\n"
    if "$h_flag"; then
        exit 0
    fi
    exit 1 # exit with error
}

eval_flags() {
    #(https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash9)
    #(https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
    # Get possible options/flags
    while getopts 'dht' flag; do
        case "${flag}" in
            d) d_flag='true' # do not remove the compiled file if this is the case
               ;;
            h) h_flag='true'
               print_usage
               ;;
            t) t_flag='true'
               ;;
            *) print_usage
               ;;
        esac
    done
}

eval_main_files() {
    main_file="" # get the source file containing the main method
    main_count=$(find . -maxdepth 1 -type f -iname '*java' -exec grep 'public static void main' {} + | wc -l)

    if (( java_count == 1 )); then
        main_file=$(basename "${java_files[0]}" .java)
        return
    fi

    if (( main_count <= 1 )); then
        # get the main file and run it
        file=$(find . -maxdepth 1 -type f -iname '*.java' -exec grep -l 'public static void main' {} +)
        main_file=$(basename "$file" .java) # turns "./test.java" into "test"
    else
        # display a menu containing all the files that contain main and let the user decide which file to run
        echo "There are multiple files with main methods. Which one would you like to run?"
        file_arr=($(find . -maxdepth 1 -type f -iname '*.java' -exec grep -l 'public static void main' {} +))
        # maybe use an array to list all of the files
        select file in $(basename -a ${file_arr[@]%.*}); do
            main_file=$(basename "$file" .java)
            break;
        done
    fi
}

# Remove compiled files after running the program
remove_compiled_files() {
    if ! "$d_flag"; then # keep the files if the 'k' flag is passed
        return
    fi

    # TODO - if d flag is passed, just run java directory (skipping over javac)
    if [[ "$1" == 'file' ]]; then
        rm "${main_file}.class" # remove the compiled file
        touch -m "${main_file}.java"
        return
    fi

    if [[ "$1" == 'directory' ]]; then
        rm -rf $package_name # remove the directory with .class files
        return
    fi
}

compile_test() {
    if [[ "$1" == 'package' ]]; then
        stderr=$(javac -d . *.java)
    elif [[ "$1" == 'single' ]]; then
        stderr=$(javac "${main_file}.java")
    elif [[ "$1" == 'junit' ]]; then
        # do not compile JUnitTests.java file
        stderr=$(find . -maxdepth 1 -type f ! -iname 'JUnitTests.java' -iname '*.java' -exec javac -d . {} +)
    fi

    return_code="$?" # determine if the compile fails or succeeds

    if [[ "$stderr" =~ "Usage" ]]; then
        echo "$stderr" | sed -z --expression='s/javac/jr/; s:<:[:; s:>:]:' # quote $stderr to preserve spacing
        exit 1 # should this just return the exit code instead
    fi

    return $return_code
}

update_check() {
    # 0 is true and 1 is false
    isOlder=1
    for file in "${java_files[@]}"; do
        if [[ "$file" -nt ".timestamp" ]]; then
            isOlder=0
            break
        fi
    done
    return $isOlder
}

# TODO - check if the file passed with jr is actually in the directory before running
#      - check what happens when a file that takes input is cancelled (^C) mid-run
# can the javac in the branches be replaced with javac -d . "$1" ?
compile_files() {
    if [[ -n "$package_name" ]]; then
        if [[ ! -f ".timestamp" ]] || update_check; then
            touch ".timestamp"
            if [[ -f "JUnitTests.java" ]]; then
                compile_test "junit"
            else
                compile_test "package"
            fi
        fi
        # only do the below if compile_test does not fail
        if (( $? != 0 )); then
            return
        fi
        { java "$package_name.$main_file" && remove_compiled_files directory; } || rm ".timestamp"
    else
        if [[ ! -f ".timestamp" ]] || [[ ".timestamp" -ot "${main_file}.java" ]]; then
            touch ".timestamp"
            compile_test "single"
        fi
        if (( $? != 0 )); then
            touch -m "${main_file}.java" # is there a more efficient way to do this
            return
        fi
        { java "${main_file}" && remove_compiled_files file; } || rm ".timestamp"
    fi
}

test_files() {
    # https://stackoverflow.com/questions/369145/how-to-assign-a-glob-expression-to-a-variable-in-a-bash-script
    jarfile=(junit-platform-console-standalone*.jar) # use array to enable globbing in variable

    if [[ ! -f "JUnitTests.java" ]] && [[ ! -f "$jarfile" ]]; then
        echoerr "JUnitTests.java does not exist"
        echoerr "JUnit executable JAR does not exist"
        exit 1
    fi

    if [[ ! -f "JUnitTests.java" ]]; then # built-in way to check if file exists
        echoerr "JUnitTests.java does not exist" # print error that unit test file does not exist
        exit 1
    fi

    # https://stackoverflow.com/questions/226703/how-do-i-prompt-for-yes-no-cancel-input-in-a-linux-shell-script for more info
    if [[ ! -f "$jarfile" ]]; then
        downloaded_jar=false
        while true; do
            read -p "Do you want to download the JUnit exectable jar? " yn # get user input
            case "$yn" in
                [Yy]* ) $(wget https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.7.0/junit-platform-console-standalone-1.7.0.jar);
                    downloaded_jar=true
                    break
                    ;;
                [Nn]* ) break;;
                * ) echo "Enter y or n"
            esac
        done
        if ! "$downloaded_jar"; then
            echoerr "JUnit executable JAR does not exist"
            exit 1
        fi
    fi

    jarname=$(find . -maxdepth 1 -type f -iname "junit-platform-console-standalone-*.jar") # search again to get the name/version
    javac -d . -cp "$jarname" *.java
    java -jar "$jarname" -cp . --scan-class-path | less -r # pipe result with color into pager

    # FIXME - first `jr` after `jr -t` fails
    rm -r "$package_name"
}

main() {
    # ${args[0]} is the name of the first argument instead of the command itself
    args=("$@") # store all of the arguments in an array for later use

    # No need to pass any files to the `jr` command - it should do everything automatically
    java_files=($(find . -maxdepth 1 -type f -iname '*.java'))
    java_count=${#java_files[@]} # stores the length of the array

    if (( java_count == 0 )); then
        echo "No Java source files in the current directory. Exiting..."
        exit 1
    fi

    # Get the name of the package
    package_name=$(find . -maxdepth 1 -type f -iname '*.java' -exec grep '^package' {} + | cut -d' ' -f2 | head -n1 | sed 's/;//')

    eval_flags "$@"
    eval_main_files

    if "$t_flag"; then test_files; else compile_files; fi
}

main "$@"
